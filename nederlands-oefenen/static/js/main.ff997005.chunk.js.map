{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["VerbsData","Home","to","class","type","VerbForm","props","handleChange","event","setState","answer","target","value","handleSubmit","preventDefault","answerCallback","state","bind","this","verb","translation","className","onSubmit","onChange","placeholder","id","React","Component","PracticeWithoutRouter","prepareExercise","exercisePool","difficulty","exercise","length","Math","random","checkAnswer","input","criteria","split","map","x","trim","results","idx","allCorrect","reduce","acc","newStreak","score","currentStreak","newMaxScore","maxStreak","lastAnswer","areAllCorrect","words","componentDidMount","match","params","undefined","Infinitief","Vertaling","CorrectWord","word","WrongWord","correction","CorrectAnswer","_","WrongAnswer","isCorrect","i","ResultsComponent","Practice","withRouter","App","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff997005.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  withRouter\n} from \"react-router-dom\";\nimport './App.css';\nimport werkworden_json from './werkworden.json';\nimport h1_json from './h1.json';\n\nconst VerbsData = {\n  \"werkworden\": werkworden_json,\n  \"h1\": h1_json\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/:id\">\n            <Practice />\n          </Route>\n        </Switch>\n      </Router>\n    </div >\n  );\n}\n\nfunction Home() {\n  return (\n    <div>\n      <h1>Welkom! Kies jouew moeilijkheid:</h1>\n      {/* Remember to give different URLs to each button and add to the router above */}\n      {/* <Link to=\"/basiswerkwoorden\"><button class=\"btn btn-primary\" type=\"submit\">Basiswerkwoorden (Oranje)</button></Link> */}\n      <Link to=\"/werkworden\"><button class=\"btn btn-primary\" type=\"submit\">Basiswerkwoorden (Oranje)</button></Link>\n      <br></br>\n      <br></br>\n      <Link to=\"/h1\"><button class=\"btn btn-primary\" type=\"submit\">Hoofdstuck 1</button></Link>\n    </div>\n  );\n}\n\n// Move to components folder\nclass VerbForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { answer: '' };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange = (event) => {\n    this.setState({ answer: event.target.value });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.props.answerCallback(this.state.answer);\n    this.setState({ answer: '' });\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>{this.props.verb} ({this.props.translation})</h2>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-append\">\n            <form className=\"form-layout\" onSubmit={this.handleSubmit}>\n              <span className=\"help-input\">Type \"Imperfectum\" and \"(is) perfectum\":</span>\n              <input value={this.state.answer} onChange={this.handleChange} type=\"text\" className=\"form-control\" placeholder=\"Imperfectum, (is) perfectum\" />\n              <button className=\"btn btn-outline-secondary\" type=\"submit\" id=\"submit-answer\">Check</button>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass PracticeWithoutRouter extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      exercise: {},\n      score: { currentStreak: 0, maxStreak: 0 },\n      lastAnswer: {\n        words: [],\n        results: [],\n        criteria: [],\n        exercise: {},\n        areAllCorrect: null\n      },\n      difficulty: undefined\n    }\n  }\n\n  prepareExercise = () => {\n    let exercisePool = VerbsData[this.state.difficulty]\n    this.setState({\n      exercise: exercisePool[exercisePool.length * Math.random() | 0]\n    })\n  }\n\n  checkAnswer = (input) => {\n    const criteria = [\"Imperfectum\", \"Perfectum\"]\n    const answer = input.split(\",\").map(x => x.trim())\n    const results = answer.map((value, idx) => value === this.state.exercise[criteria[idx]])\n    const allCorrect = results.reduce((acc, value) => {\n      return acc && value\n    }, true)\n    const newStreak = allCorrect ? this.state.score.currentStreak + 1 : 0;\n    const newMaxScore = newStreak > this.state.score.maxStreak ? newStreak : this.state.score.maxStreak;\n    this.setState({\n      lastAnswer: {\n        areAllCorrect: allCorrect,\n        words: answer,\n        results: results,\n        criteria: criteria,\n        exercise: this.state.exercise,\n      },\n      score: {\n        currentStreak: newStreak,\n        maxStreak: newMaxScore,\n      }\n    }, this.prepareExercise)\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      difficulty: this.props.match.params.id,\n    }, this.prepareExercise)\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Streak: {this.state.score.currentStreak} Record: {this.state.score.maxStreak}</h3>\n        <br></br>\n        <VerbForm verb={this.state.exercise.Infinitief} translation={this.state.exercise.Vertaling} answerCallback={this.checkAnswer} />\n        {this.state.lastAnswer.areAllCorrect === null ? null : <ResultsComponent lastAnswer={this.state.lastAnswer} />}\n        <br></br>\n        <br></br>\n        <h5>Difficulty: {this.state.difficulty}</h5>\n      </div>\n    );\n  }\n}\n\nclass CorrectWord extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <span>{this.props.word} âœ… </span>\n    );\n  }\n}\nclass WrongWord extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <span><strike>{this.props.word}</strike> {this.props.correction}<br></br></span>\n    );\n  }\n}\n\nclass CorrectAnswer extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div className=\"answer answer-correct\">\n        <p>\n          {this.props.lastAnswer.words.map((value, _) => {\n            return <CorrectWord word={value} />\n          })}\n        </p>\n      </div>\n    );\n  }\n}\n\nclass WrongAnswer extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div className=\"answer answer-wrong\">\n        <p>\n          {this.props.lastAnswer.results.map((isCorrect, i) => {\n            if (isCorrect) {\n              return <CorrectWord word={this.props.lastAnswer.words[i]} />;\n            } else {\n              const criteria = this.props.lastAnswer.criteria;\n              return <WrongWord word={this.props.lastAnswer.words[i]} correction={this.props.lastAnswer.exercise[criteria[i]]} />\n            }\n          })}\n        </p>\n      </div>\n    );\n  }\n}\n\nclass ResultsComponent extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <div className=\"input-group mb-3\">\n        <div className=\"input-group-append\">\n          {this.props.lastAnswer.areAllCorrect ?\n            <CorrectAnswer lastAnswer={this.props.lastAnswer} /> :\n            <WrongAnswer lastAnswer={this.props.lastAnswer} />}\n        </div>\n      </div>);\n  }\n}\n\nconst Practice = withRouter(PracticeWithoutRouter);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}